@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options

@inject NavigationManager NavigationManager
@inject IOptions<AppSettings> _appsettings;

@implements IAsyncDisposable

<MudContainer Style="height:100%">
  <MudTooltip Text="Damage detected based on search criteria below.">
    <MudText Typo="Typo.h5">Real-Time Detection:</MudText>
  </MudTooltip>
  <MudTable Style="height:100%" Class="overflow-scroll" Items="@messages" @ref="@mudTable" Breakpoint="Breakpoint.Sm" T="Realtime">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<Realtime, object>(e=>e.Time)"><MudText Typo="Typo.h5">Time</MudText></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Realtime, object>(e=>e.YArea)"><MudText Typo="Typo.h5">Y</MudText></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Realtime, object>(e=>e.Value)"><MudText Typo="Typo.h5"> Total </MudText></MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
            <MudTd Typo="Typo.h5" DataLabel="Time" >@(string.Format("{0:d}:{0:t}", @context.Time))</MudTd>
            <MudTd Typo="Typo.h5" DataLabel="Y" >@(string.Format("{0}", @context.YArea/1000))</MudTd>
            <MudTd Typo="Typo.h5" DataLabel="Total" >@(string.Format("{0}", @context.Value))</MudTd>
    </RowTemplate>
  </MudTable>


</MudContainer>

@code {
    [Parameter]
    public string Site { get; set; } = String.Empty;

    [Parameter]
    public string Conveyor { get; set; } = String.Empty;
    

    protected MudTable<Realtime> mudTable = new();
    private HubConnection? hubConnection;
    private List<Realtime> messages = new();

    protected override async Task OnInitializedAsync()
    {
        if(string.IsNullOrWhiteSpace(_appsettings.Value.Authorization))
        {
          hubConnection = new HubConnectionBuilder()
          .WithUrl(NavigationManager.ToAbsoluteUri("/realtime"))
          .Build();
        } else {
          hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/realtime"), options => {options.Headers.Add("authorization",_appsettings.Value.Authorization);})
            .Build();
        }
        
        hubConnection.On<Realtime>("ReceiveMessageRealtime", (message) =>
        {
            messages.Prepend(message);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinGroup","/realtime"+Site+Conveyor);
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
          await hubConnection.InvokeAsync("LeaveGroup","/realtime"+Site+Conveyor);
          await hubConnection.DisposeAsync();
        }
    }
}