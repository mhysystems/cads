@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options

@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject IOptions<AppSettings> _appsettings
@inject BeltService beltservice
@inject IHttpContextAccessor _httpContext

@implements IAsyncDisposable

<MudContainer Style="height:100%" Class="ma-0 pa-0 d-flex flex-column">
  <MudTooltip Text="Damage detected based on search criteria below.">
    <MudText Class="flex-grow-0 " Typo="Typo.h5">Real-Time Detection:</MudText>
  </MudTooltip>
  <MudTable  Class="flex-grow-1 ma-0 pa-0 overflow-scroll" Items="@messages" @ref="@mudTable" Breakpoint="Breakpoint.Sm" OnRowClick="@RowClickEventAsync" T="AnomalyMsg">
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<AnomalyMsg, object>(e=>e.Timestamp)"><MudText Typo="Typo.h5">Time</MudText></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AnomalyMsg, object>(e=>e.Location)"><MudText Typo="Typo.h5">Y</MudText></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<AnomalyMsg, object>(e=>e.Value)"><MudText Typo="Typo.h5"> Total </MudText></MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
            <MudTd Typo="Typo.h5" DataLabel="Time" >@(string.Format("{0:d}:{0:t}", @context.Timestamp))</MudTd>
            <MudTd Typo="Typo.h5" DataLabel="Y" >@(string.Format("{0}", @context.Location/1000))</MudTd>
            <MudTd Typo="Typo.h5" DataLabel="Total" >@(string.Format("{0}", @context.Value))</MudTd>
    </RowTemplate>
  </MudTable>


</MudContainer>

@code {

  [Parameter]
  public string Site { get; set; } = String.Empty;

  [Parameter]
  public string Conveyor { get; set; } = String.Empty;
  [Parameter]
  public EventCallback<double> selectedRow { get; set; }
    

  protected MudTable<AnomalyMsg> mudTable = new();
  private HubConnection? hubConnection;
  private List<AnomalyMsg> messages = new();
  

  protected override async Task OnInitializedAsync()
  {
    messages = await beltservice.GetAnomalies(Site,Conveyor);
    hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/realtime"), options => 
        {
          var cookies = _httpContext?.HttpContext?.Request.Cookies;
          if(cookies is not null)
          {
            foreach(var c in cookies )
            {
              var uri = new UriBuilder(NavigationManager.Uri);
              options.Cookies.Add(new System.Net.Cookie(c.Key,c.Value)
              {
                Domain = uri.Host
              });
            }
          }
        })
      .Build();

      var timezone = beltservice.GetConveyorTimezone(Site,Conveyor);
      hubConnection.On<AnomalyMsg>("ReceiveMessage", (message) =>
      {
          message.Timestamp = TimeZoneInfo.ConvertTimeFromUtc(message.Timestamp, timezone);
          if(messages.Count > 64) {
            messages.RemoveAt(messages.Count - 1);
            messages.Insert(0,message);
          }else {
            messages.Insert(0,message);
          }
          InvokeAsync(StateHasChanged);
      });

      await hubConnection.StartAsync();
      await hubConnection.InvokeAsync("JoinGroup","anomalies"+Site+Conveyor);
  }

  public bool IsConnected =>
      hubConnection?.State == HubConnectionState.Connected;

  public async ValueTask DisposeAsync()
  {
      if (hubConnection is not null)
      {
        await hubConnection.InvokeAsync("LeaveGroup","anomalies"+Site+Conveyor);
        await hubConnection.DisposeAsync();
      }
  }

  protected async Task RowClickEventAsync(TableRowClickEventArgs<AnomalyMsg> tableRowClickEventArgs)
  {
    await selectedRow.InvokeAsync(tableRowClickEventArgs.Item.Location);
  }

}