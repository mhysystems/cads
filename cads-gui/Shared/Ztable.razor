@namespace Cads

<style>
  .selected {
  background-color: #1E88E5 !important;
}

.selected > td {
    color: white !important;
}

.selected > td .mud-input {
    color: white !important;
}
</style>


<div id="main-screen">
  <MudTable Items="@_data" @ref="@mudTable" Hover="true" RowClassFunc="@SelectedRowClassFunc" Breakpoint="Breakpoint.Sm" OnRowClick="@RowClickEventAsync" T="ZDepth">
    <HeaderContent>
        <!--<MudTh></MudTh>-->
        <MudTh><MudTableSortLabel SortBy="new Func<ZDepth, object>(e=>e.x)"><MudText Typo="Typo.body2">X</MudText></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ZDepth, object>(e=>e.y)"><MudText Typo="Typo.body2">Y</MudText></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ZDepth, object>(e=>e.t)"><MudText Typo="Typo.body2"> Total </MudText></MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ZDepth, object>(e=>e.z.z)"><MudText Typo="Typo.body2"> Z-Min </MudText></MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
            <!--<MudTd><span class="oi oi-location" @onclick=@(e => row_clicked(context.index))></span></MudTd>-->
            <MudTd DataLabel="X" >@(string.Format("{0:0.00}", @context.z.x))</MudTd>
            <MudTd DataLabel="Y" >@(string.Format("{0:0.00}", @context.z.y/1000))</MudTd>
            <MudTd DataLabel="%" >@(string.Format("{0:0}", @context.t*100))</MudTd>
            <MudTd DataLabel="Z-Min" >@(string.Format("{0:0.00}", @context.z.z))</MudTd>
    </RowTemplate>
  </MudTable>

</div



@code {
  protected List<ZDepth> _data = new();
  protected int selectedRowNumber = -1;
  protected MudTable<ZDepth> mudTable = new();
  
  public List<ZDepth> data {
  get{ return _data;} 
    set{
      _data = value;
      StateHasChanged();
    }
  }

  [Parameter]
  public EventCallback<ZDepth> selectedRow { get; set; }

  protected async Task RowClickEventAsync(TableRowClickEventArgs<ZDepth> tableRowClickEventArgs)
  {
    await selectedRow.InvokeAsync(tableRowClickEventArgs.Item);
  }

  protected string SelectedRowClassFunc(ZDepth element, int rowNumber)
  {
    if (mudTable.SelectedItem != null && mudTable.SelectedItem == element)
    {
        selectedRowNumber = rowNumber;
        return "selected";
    }
    else
    {
        return string.Empty;
    }
  }


}
