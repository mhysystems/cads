@inject BeltService Beltservice

<MudToolBar Class="d-flex flex-grow-0 ma-0" Style="width:50%">
  <MudTooltip Text="Search belt for damage ">
    <MudButton Class="mud-theme-secondary" StartIcon="@Icons.Material.Filled.ImageSearch" Size="Size.Large" OnClick="@Search" />
  </MudTooltip>
  
  <!--<MudAutocomplete Label="Saved Z Depth" @bind-Value="@selectedZDepthParams" T="SavedZDepthParams" ResetValueOnEmptyText="true"
   CoreceText="false" CoerceValue="true" ToStringFunc="@ToStringFunc" SearchFunc="GetSavedZDepthParams" Dense="true" ListClass="mud-palette-text-secondary mud-theme-secondary ma-0 flex-grow-0" />
  -->

  <MudAutocomplete Label="Saved Z Depth" Class="mud-palette-secondary"  @bind-Value="@selectedZDepthParamsString" T="string" ResetValueOnEmptyText="true" Clearable="true"
   CoreceText="false" CoerceValue="true"Dense="true" SearchFunc="GetSavedZDepthParams2" ListClass="overload-mud-list-item-secondary" />

  
  <MudTooltip Text="Save Z query parameters">
    <MudButton Class="mud-theme-secondary" StartIcon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="@SaveZQueryParamsInvoke" />
  </MudTooltip>

  <MudTooltip Text="Step Backwards">
    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.FastRewind" Size="Size.Large" OnClick="@StepBackAsync" />
  </MudTooltip>
  <MudTooltip Text="Jump">
    <MudNumericField Color="Color.Secondary" HideSpinButtons="true" ValueChanged="@JumpTo" Class="ma-0 flex-grow-0"
      Variant="Variant.Text" Min="0" Max="@(scan.Ymax / 1000)" />
  </MudTooltip>
  <MudTooltip Text="Step Forward">
    <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.FastForward" Size="Size.Large"
      OnClick="@StepForwardAsync" />
  </MudTooltip>


  <MudTooltip Text="Historical Scans">
    @if (_scanDate is not null)
    {
      <MudDatePicker Class="mud-theme-secondary" AdornmentColor="@Color.Primary" @bind-Date="@scanDate"
      IsDateDisabledFunc="@IsDateDisabledFunc" />
    }
  </MudTooltip>
</MudToolBar>


@code {

  protected DateTime? _scanDate = null;

  protected DateTime? scanDate
  {
    get { return _scanDate; }
    set
    {
      _scanDate = value;
      DateChanged.InvokeAsync(value).AndForget();
    }
  }

  string _selectedZDepthParamsString;
  private string selectedZDepthParamsString
  {
    get { return _selectedZDepthParamsString; }
    set
    {
      _selectedZDepthParamsString = value;
      if(_selectedZDepthParamsString is not null){
      var l = savedZDepthParams.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
      if(l.Any()) {
        SelectZDepthParams.InvokeAsync(l.Last()).AndForget();
      }
    }
    }
  }

  protected Func<DateTime, bool> IsDateDisabledFunc = (DateTime d) => false;

  private SavedZDepthParams _selectedZDepthParams = new();
  private SavedZDepthParams selectedZDepthParams
  {
    get { return _selectedZDepthParams; }
    set
    {
      _selectedZDepthParams = value;
      SelectZDepthParams.InvokeAsync(value).AndForget();
    }
  }
  
  [Parameter]
  public List<SavedZDepthParams> savedZDepthParams { get; set; }
  
  [Parameter]
  public EventCallback<SavedZDepthParams> SelectZDepthParams { get; set; }

  [Parameter]
  public EventCallback<string> SaveZQueryParams { get; set; }

  [Parameter]
  public Scan scan { get; set; }

  [Parameter]
  public EventCallback<int> StepBack { get; set; }

  [Parameter]
  public EventCallback<int> StepForward { get; set; }

  [Parameter]
  public EventCallback<double> JumpTo { get; set; }

  [Parameter]
  public EventCallback Search { get; set; }

  [Parameter]
  public EventCallback<DateTime?> DateChanged { get; set; }


  protected override async Task OnInitializedAsync()
  {
       _scanDate = (await Beltservice.GetBeltDatesAsync(scan)).LastOrDefault(DateTime.Now);

    if (savedZDepthParams.Any())
    {
      selectedZDepthParams = savedZDepthParams.First();
      selectedZDepthParamsString = selectedZDepthParams.Name;
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      if (savedZDepthParams.Any())
      {
        await SelectZDepthParams.InvokeAsync(savedZDepthParams.First());
      }
    }

    var validDates = await Beltservice.GetBeltDatesAsync(scan);
    IsDateDisabledFunc = (DateTime d) => !validDates.Where(e => e.Date == d.Date).Any();

  }

  private async Task StepBackAsync(MouseEventArgs e)
  {
    await StepBack.InvokeAsync(0);
  }

  private async Task StepForwardAsync(MouseEventArgs e)
  {
    await StepForward.InvokeAsync(0);
  }
  private async Task  SaveZQueryParamsInvoke(MouseEventArgs e)
  {
    await SaveZQueryParams.InvokeAsync(_selectedZDepthParamsString);
  }


  protected string ToStringFunc(SavedZDepthParams p) {
    if(p is null)
    {
      return string.Empty;
    }else {
      return p.Name;
    }
  }

    protected async Task<IEnumerable<SavedZDepthParams>> GetSavedZDepthParams(string value)
    {
      if (string.IsNullOrEmpty(value)){
        return savedZDepthParams;
      }
      return savedZDepthParams.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    protected async Task<IEnumerable<string>> GetSavedZDepthParams2(string value)
    {
      if (string.IsNullOrEmpty(value)){
        return savedZDepthParams.Select(e => e.Name);
      }
      return savedZDepthParams.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase)).Select(e => e.Name);
    }


}