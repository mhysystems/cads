@namespace Cads

@implements IAsyncDisposable

@inject BeltService Beltservice
@inject IJSRuntime JS

<style>
  #container-profile {
    width: 99%;
    height: 100%;
    margin: 0;
    padding: 0;

  }

  plotly-container-two {
    position: static;
    display: block;
    width: 100%;
    height: 100%;

  }
</style>

<plotly-container-two>
  <div id="container-profile" @ref="@jsPlot"></div>
</plotly-container-two>


@code {

  [Parameter]
  public Scan? Scan { get; set; }
  
  protected IJSObjectReference? jsProfilePlot;
  protected ElementReference jsPlot;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender && Scan is not null)
    {
      var belt = Beltservice.GetBelt(Scan);
      var scanLimits = Beltservice.GetScanLimits(Scan);

      if(belt is not null && scanLimits is not null) {
        await using var module = await JS.InvokeAsync<IJSObjectReference>("import", "./plot.js");
        var xRes = scanLimits.Width / scanLimits.WidthN;
        jsProfilePlot = await module.InvokeAsync<IJSObjectReference>("mk_ProfilePlot", jsPlot, xRes, scanLimits.ZMin, scanLimits.ZMax, belt.TopCover, belt.CordDiameter, belt.PulleyCover);
      }  
    }

  }

  public async Task UpdatePlotAsync(IJSObjectReference plotDataPromise, int y = 1)
  {
    if (jsProfilePlot is not null)
    {
      await jsProfilePlot.InvokeVoidAsync("updatePlot", plotDataPromise, y);
    }
  }

  public async Task UpdateYAsync(int y = 1)
  {
    if (jsProfilePlot is not null)
    {
      await jsProfilePlot.InvokeVoidAsync("updateY", y);
    }
  }

  public async Task UpdatePlotDoubleSidedAsync(IJSObjectReference plotDataPromiseTop, IJSObjectReference
  plotDataPromiseBottom, int y = 1)
  {
    if (jsProfilePlot is not null)
    {
      await jsProfilePlot.InvokeVoidAsync("updatePlotDoubleSided", plotDataPromiseTop, plotDataPromiseBottom, y);
    }
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    try {
    if (jsProfilePlot is not null) {
     await jsProfilePlot.DisposeAsync();
    }
    }catch(Microsoft.JSInterop.JSDisconnectedException) {}
  }
}
