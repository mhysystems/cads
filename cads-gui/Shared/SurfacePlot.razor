@namespace Cads
@inject IJSRuntime JS
@implements IAsyncDisposable

@using cads_gui.Data

@using Microsoft.Extensions.Logging;
@using System.Diagnostics;
@inject ILogger<SurfacePlot> logger;

@inject BeltService Beltservice


<surface-plot>
  <div id="container" @ref="@jsPlot"></div>
  <div class="spin-container" loading="@_Loading">
    <div class="spin"></div>
  </div>
  <color-range>
    <input @onchange="@SliderOnChangeAsync" type="range" id="color-slider" value="@scan.z_max" step="any"
      min="@scan.z_min" max="@scan.z_max">
  </color-range>
</surface-plot>



@code {

  double sliderLow;
  private DotNetObjectReference<SurfacePlot>? selfReference;

  protected ElementReference jsPlot;

  protected Func<float, bool> isZred = z => false;

  protected bool _Loading = false;

  public bool Loading
  {
    get { return _Loading; }
    set
    {
      var tmp = _Loading;
      _Loading = value;
      if (tmp != value) { InvokeAsync(() => StateHasChanged()); }
    }
  }

  [Parameter]
  public Scan scan { get; set; } = new();

  [Parameter]
  public EventCallback<double> clevelChanged { get; set; }

  [Parameter]
  public EventCallback<(int, double)> YIndex { get; set; }

  [Parameter]
  public double clevel { get; set; } = 0.0;

  (bool use_array, string str, (double, string)[] array) colorscale;
  [Parameter]
  public string colour_query { get; set; } = $"\"area\":0.8,\"sum\":1000,\"num\":320,\"query\":\"z == -999999999\"";

  protected IJSObjectReference? jsSurfacePlot;

  protected override void OnInitialized()
  {
    logger.LogInformation($"Plotting for {scan.name}");
    (double, string)[] s = { (0, "hsl(240,100,50)"), (0.002, "hsl(0,0,100)"), (1.0, "hsl(0,0,0)") };
    colorscale = (true, "Greys", s);
    sliderLow = scan.z_max;
  }


  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      selfReference = DotNetObjectReference.Create(this);
      var module = await JS.InvokeAsync<IJSObjectReference>("import", "./plot.js");
      jsSurfacePlot = await
      module.InvokeAsync<IJSObjectReference>("mk_SurfacePlot", jsPlot, scan.x_res, scan.z_min, scan.z_max,
      colorscale.use_array ?
      colorscale.array.Select(i => i.ToTuple()) : colorscale.str, selfReference);
    }
  }

  public async Task HighlightSurfaceAsync(Func<float, bool> fn)
  {
    var colorRange = GenerateColorRange(scan.z_max - sliderLow, fn).ToArray();
    if (jsSurfacePlot is not null)
    {
      await jsSurfacePlot.InvokeVoidAsync("changeColorScale", colorRange.Select(i => i.ToTuple()));
    }
  }

  public async Task<double> UpdatePlotWithOverlayAsync(IJSObjectReference plotDataPromise, ZDepth zd)
  {
    if (jsSurfacePlot is not null)
    {
      var y = await jsSurfacePlot.InvokeAsync<double>("updatePlotWithOverlay", plotDataPromise, zd);
      return y;
    }
    else
    {
      return 0;
    }

  }

  public async Task<double> UpdatePlotAsync(IJSObjectReference plotDataPromise)
  {
    if (jsSurfacePlot is not null)
    {
      var y = await jsSurfacePlot.InvokeAsync<double>("updatePlot", plotDataPromise, scan.x_res);
      return y;
    }
    else
    {
      return 0;
    }
  }

  public async Task<double> UpdatePlotDoubleSidedAsync(IJSObjectReference plotDataPromiseTop, IJSObjectReference
  plotDataPromiseBottom)
  {
    if (jsSurfacePlot is not null)
    {
      var y = await jsSurfacePlot.InvokeAsync<double>("updatePlotDoubleSided", plotDataPromiseTop, plotDataPromiseBottom,
      scan.x_res);
      return y;
    }
    else
    {
      return 0;
    }
  }

  /// <summary>
  /// Generate color map for plotly
  /// </summary>
  /// <param name="zStart"> Length(mm) of area in X direction</param>
  /// <param name="fn"> Length(mm) of area in Y direction</param>
  /// <returns></returns>
  public List<(double, string)> GenerateColorRange(double zStart = 0, Func<float, bool>? fn = null)
  {

    var colour_range = new List<(double, string)>();

    if (fn is not null)
    {
      isZred = fn;
    }


    float z_max = (float)scan.z_max;
    float z_min = 0f;
    var steps = 1000;

    double red_acc = 25.0;
    double red_scale = 1.0;
    Func<float, bool, double> red_colour_range = (float z, bool b) =>
    {
      red_acc += red_scale * (b ? 1 : 0);
      return red_acc;
    };

    double grey_acc = 0.0;
    double grey_scale = 1.0;
    Func<float, bool, double> grey_colour_range = (float z, bool b) =>
    {
      if (z >= zStart) grey_acc += grey_scale * (b ? 0 : 1);
      return grey_acc;
    };

    double red_acc_tmp = 0.0;
    double grey_acc_tmp = 0.0;
    for (int n = 0; n < steps; n++)
    {
      var z = (z_max - z_min) * n / steps + z_min;
      var b = isZred(z);
      red_acc_tmp = red_colour_range(z, b);
      grey_acc_tmp = grey_colour_range(z, b);
    }

    red_acc = 25.0;
    red_scale = 50 / (red_acc_tmp - red_acc);
    grey_acc = 0.0;
    grey_scale = 100 / grey_acc_tmp;

    var r1 = red_colour_range(z_min, isZred(z_min));
    var g1 = grey_colour_range(z_min, isZred(z_min));
    bool is_red0 = isZred(z_min);
    bool is_grey0 = z_min >= zStart;
    colour_range.Add((0, "hsl(240,100,50)"));
    colour_range.Add(is_red0 ? (0.002, "hsl(0,100,25)") : (0.002, "hsl(0,0,100)"));

    for (int n = 1; n < steps - 1; n++)
    {
      var z = (z_max - z_min) * n / steps + z_min;
      var c_index = n / (double)steps;
      var is_red1 = isZred(z);
      var is_grey1 = z >= zStart;
      var r = red_colour_range(z, is_red1);
      var g = grey_colour_range(z, is_red1);

      if (is_red0 != is_red1)
      {
        if (is_red1)
        {
          colour_range.Add((c_index, $"hsl(0,0,{100 - (int)g})"));
          colour_range.Add((c_index, $"hsl(0,100,{(int)r})"));
        }
        else
        {
          colour_range.Add((c_index, $"hsl(0,100,{(int)r})"));
          colour_range.Add((c_index, $"hsl(0,0,{100 - (int)g})"));
        }

      }

      if (!is_red1 && is_grey0 != is_grey1)
      {

        colour_range.Add((c_index, $"hsl(0,0,{100 - (int)g})"));

      }

      is_red0 = is_red1;
      is_grey0 = is_grey1;
    }

    is_red0 = isZred(z_max);
    colour_range.Add(is_red0 ? (1.0, "hsl(0,100,75)") : (1.0, "hsl(0,0,0)"));


    return colour_range;
  }


  protected async Task SliderOnChangeAsync(ChangeEventArgs e)
  {
    sliderLow = Convert.ToDouble(e.Value);
    var colorRange = GenerateColorRange(scan.z_max - sliderLow).ToArray();
    if(jsSurfacePlot is not null) {
      await jsSurfacePlot.InvokeVoidAsync("changeColorScale", colorRange.Select(i => i.ToTuple()));
    }
  }


  [JSInvokable]
  public async Task PlotClicked(int yIndex, double y)
  {
    await YIndex.InvokeAsync((yIndex, y));
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    try {
      selfReference?.Dispose();
    if (jsSurfacePlot is not null) {
     await jsSurfacePlot.DisposeAsync();
     jsSurfacePlot = null;
    }
    }catch(Microsoft.JSInterop.JSDisconnectedException) {}
  }


}
