@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Options

@inject NavigationManager NavigationManager
@inject IOptions<AppSettings> _appsettings;

@implements IAsyncDisposable

<MudContainer Style="display:flex; align-items:center">
<MudGrid Spacing="1">
  
  <MudItem xs="8">
  <MudText Typo="Typo.h6">Surface Speed (m/s)</MudText>
  </MudItem>
  <MudItem xs="4">
  <MudText Typo="Typo.h6">@SurfaceSpeed</MudText>
  </MudItem>
  
  <MudItem xs="8">
  <MudText Typo="Typo.h6">Current Length (m)</MudText>
  </MudItem>
  <MudItem xs="4">
  <MudText Typo="Typo.h6">@CurrentLength</MudText>
  </MudItem>

  <MudItem xs="8">
  <MudText Typo="Typo.h6">Rotation period (mm:ss)</MudText>
  </MudItem>
  <MudItem xs="4">
  <MudText Typo="Typo.h6">@RotationPeriod</MudText>
  </MudItem>
  
  <MudItem xs="8">
  <MudText Typo="Typo.h6">CADS to Origin (m)</MudText>
  </MudItem>
  <MudItem xs="4">
  <MudText Typo="Typo.h6">@CadsToOrigin</MudText>
  </MudItem>
  
  <MudItem xs="8">
  <MudText Typo="Typo.h6">Pulley Oscillation (mm)</MudText>
  </MudItem>
  <MudItem xs="4">
  <MudText Typo="Typo.h6">@PulleyOscillation</MudText>
  </MudItem>

</MudGrid>
</MudContainer>

@code {
    [Parameter]
    public string Site { get; set; } = String.Empty;

    [Parameter]
    public string Conveyor { get; set; } = String.Empty;
    private HubConnection? hubConnection;
    private string SurfaceSpeed = string.Empty;
    private string CurrentLength = string.Empty;
    private string RotationPeriod = string.Empty;
    private string CadsToOrigin = string.Empty;
    private string PulleyOscillation = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if(string.IsNullOrWhiteSpace(_appsettings.Value.Authorization))
        {
          hubConnection = new HubConnectionBuilder()
          .WithUrl(NavigationManager.ToAbsoluteUri("/realtime"))
          .Build();
        } else {
          hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/realtime"), options => {options.Headers.Add("authorization",_appsettings.Value.Authorization);})
            .Build();
        }

        hubConnection.On<MetaRealtime>("ReceiveMessage", (message) =>
        {
            switch(message.Id) {
              case "SurfaceSpeed":
                SurfaceSpeed = message.Valid ? message.Value.ToString("F2") : string.Empty;
              break;
              case "CurrentLength":
                CurrentLength = message.Valid ? (message.Value / 1000).ToString("F2") : string.Empty;
              break;
              case "RotationPeriod":
                RotationPeriod = message.Valid ? TimeSpan.FromMilliseconds(message.Value).ToString(@"mm\:ss") : string.Empty;
              break;
              case "CadsToOrigin":
                CadsToOrigin = message.Valid ? (message.Value / 1000).ToString("F2") : string.Empty;
              break;
              case "PulleyOscillation":
                PulleyOscillation = message.Valid ? message.Value.ToString("F2") : string.Empty;
              break;
              default:
              break;
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("JoinGroup","measurements"+Site+Conveyor);
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
          await hubConnection.InvokeAsync("LeaveGroup","/realtimemeta"+Site+Conveyor);
          await hubConnection.DisposeAsync();
        }
    }
}