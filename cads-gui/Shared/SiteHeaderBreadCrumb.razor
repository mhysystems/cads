@using cads_gui.Data

@using System.Collections.Generic
@using System.Linq

@implements IDisposable

@inject NavigationManager nav

@using Microsoft.Extensions.Logging
@inject ILogger<SiteHeader> logger


<MudBreadcrumbs Items="breadCrumbItems" Separator=">"></MudBreadcrumbs>

@code 
{

	List<BreadcrumbItem> breadCrumbItems;

void UpdateHeader(string location) {
	logger.LogInformation($"UpdateHeader({location})");
	
	breadCrumbItems = new List<BreadcrumbItem>{new BreadcrumbItem("home","/")};
	
	var segments = nav.ToBaseRelativePath(location).Split("/").Skip(1).ToArray(); 
	if(segments.Length > 0) {
		breadCrumbItems.AddRange(segments.Select((s,i) => new BreadcrumbItem(s, href: $"/sites/{string.Join('/',segments.Take(i+1))}" ))); //.ToList();
	}else { // Home
		breadCrumbItems = new List<BreadcrumbItem>{new BreadcrumbItem("home", href:location)};
	}
	StateHasChanged();
}

void LocationChanged(object sender, LocationChangedEventArgs e)
{
	UpdateHeader(e.Location);
}

	protected override async Task OnInitializedAsync()
	{
		nav.LocationChanged += LocationChanged;
		UpdateHeader(nav.Uri);
	}

void IDisposable.Dispose()
{
  // Unsubscribe from the event when our component is disposed
  nav.LocationChanged -= LocationChanged;
}


}