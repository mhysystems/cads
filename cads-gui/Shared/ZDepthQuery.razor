@namespace Cads
@implements IAsyncDisposable
@inject IJSRuntime JS

@using cads_gui.Data
@using System.Collections.Generic

@inject BeltService Beltservice


  <MudGrid Style="height:100%" Spacing="1">
    <MudItem Style="height:50%" xs="12">
      <canvas id="three"></canvas>
    </MudItem>
    <MudItem xs="12" Class="d-flex gap-0 ">

        <MudTooltip Text="X">
        <MudNumericField HideSpinButtons="true" Immediate="true" Class="X queryInput mt-0" T="int"  @bind-value="@X" Min="0" Max="(int)Belt.Xmax" Variant="Variant.Text">
        </MudNumericField>
        </MudTooltip>

        <MudTooltip Text="Y">
        <MudNumericField HideSpinButtons="true" Immediate="true" Class="Y queryInput mt-0" T="int"  @bind-value="@Y" Min="0" Max="(int)Belt.FrameLength" Variant="Variant.Text">
        </MudNumericField>
        </MudTooltip>
        <MudTooltip Text="Z">
        <MudNumericField HideSpinButtons="true" Immediate="true" Class="Z queryInput mt-0" T="int"  @bind-value="@Z" Min="0" Max="(int)Belt.z_max" Variant="Variant.Text">
        </MudNumericField>
        </MudTooltip>
        <MudTooltip Text="%">
        <MudNumericField HideSpinButtons="true" Immediate="true" Class="P mt-0" T="double" @bind-value="@P" Min="0" Max="100" Step="1.0" Variant="Variant.Text">
        </MudNumericField>
        </MudTooltip>
    </MudItem>
  </MudGrid>


@code {
  protected int X = 1600;
  protected int Y = 4000;
  protected int Z = 90;
  protected double P = 1;
  protected string queryZ { get; set; } = "30";
  protected string queryY = "4000", queryX = "1600", queryP = "0.1";

  protected string damaged = "";
  protected List<SavedZDepthParams> savedZDepthParams = new List<SavedZDepthParams>();

  [Parameter]
  public Belt Belt {get; set;}

  public ZDepthQueryParameters SearchParameters { get{return new ZDepthQueryParameters(X,Y,Z,P / 100);} private set{} }


  protected IJSObjectReference module;

  protected override async Task OnInitializedAsync()
  {
    Y = (int)Belt.FrameLength;
    X = (int)Belt.Xmax;
    Z = (int)Belt.z_max;

    savedZDepthParams = await Task.Run(() => Beltservice.GetSavedZDepthParams(Belt).ToList()) ?? new List<SavedZDepthParams>();

  }

  protected override async Task OnParametersSetAsync() {

  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      module = await JS.InvokeAsync<IJSObjectReference>("import", "./querybuilder.js");
      await module.InvokeVoidAsync("initThree",X,Y,Z);
    }

  }

  protected async Task LoadDamageAsync(SavedZDepthParams d)
  {
    var queryX = string.Format("{0:F2}", d.Width);
    var queryY = string.Format("{0:F2}", d.Length);
    var queryZ = string.Format("{0:F2}", d.Depth);
    var queryP = string.Format("{0:F2}", (d.Percentage * 100));
    if(module is not null) {
      await module.InvokeVoidAsync("update", queryX, queryY, queryZ, queryP);
    }
  }

  public Func<float,bool> MakeAreaOfInterest()
  {
    return z => z < Z;  
  }


  public async Task LoadZDepthParamsAsync(IEnumerable<SavedZDepthParams> xs)
  {
    foreach (var s in xs)
    {
      await LoadDamageAsync(s);
    }
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    try {
    if (module is not null) {
     await module.DisposeAsync();
    }
    }catch(Microsoft.JSInterop.JSDisconnectedException) {}
  }
}