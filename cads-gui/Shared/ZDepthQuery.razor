@namespace Cads
@implements IAsyncDisposable

@inject IJSRuntime JS
@inject ILogger<ZDepthQuery> logger

@using cads_gui.Data
@using System.Collections.Generic

@inject BeltService Beltservice


<MudGrid Style="height:100%" Spacing="1">
  <MudItem Style="height:50%" xs="12">
    <canvas id="three"></canvas>
  </MudItem>
  <MudItem xs="12" Class="d-flex gap-0 ">
    <MudTooltip Text="X Range Minimum">
      <MudNumericField HideSpinButtons="true" Immediate="true" Class="XMin queryInput mt-0" T="double" @bind-Value="@XMin"
        Min="@((int)(-Belt.Xmax / 2))" Max="0" Variant="Variant.Text" Format="N0">
      </MudNumericField>
    </MudTooltip>
    <MudTooltip Text="X Range Maximum">
      <MudNumericField HideSpinButtons="true" Immediate="true" Class="XMax queryInput mt-0" T="double" @bind-Value="@XMax"
        Min="0" Max="@((int)Belt.Xmax)" Variant="Variant.Text" Format="N0"> 
      </MudNumericField>
    </MudTooltip>
  </MudItem>
  <MudItem xs="12" Class="d-flex gap-0 ">

    <MudTooltip Text="X">
      <MudNumericField HideSpinButtons="true" Immediate="true" Class="X queryInput mt-0" T="int" @bind-Value="@X"
        Min="0" Max="(int)Belt.Xmax" Variant="Variant.Text">
      </MudNumericField>
    </MudTooltip>

    <MudTooltip Text="Y">
      <MudNumericField HideSpinButtons="true" Immediate="true" Class="Y queryInput mt-0" T="int" @bind-Value="@Y"
        Min="0" Max="(int)Belt.FrameLength" Variant="Variant.Text">
      </MudNumericField>
    </MudTooltip>
    <MudTooltip Text="Z">
      <MudNumericField HideSpinButtons="true" Immediate="true" Class="Z queryInput mt-0" T="int" @bind-Value="@Z"
        Min="(int)Belt.z_min" Max="(int)Belt.z_max" Variant="Variant.Text">
      </MudNumericField>
    </MudTooltip>
    <MudTooltip Text="%">
      <MudNumericField HideSpinButtons="true" Immediate="true" Class="P mt-0" T="double" @bind-Value="@P" Min="0"
        Max="100" Step="1.0" Format="F2" Variant="Variant.Text">
      </MudNumericField>
    </MudTooltip>
  </MudItem>
</MudGrid>


@code {
  protected int X = 1600;
  protected int Y = 4000;
  protected int Z = 90;
  protected double P = 1;

  protected double XMin = 0;
  protected double XMax = 0;

  protected SavedZDepthParams savedZDepthParams = new();

  [Parameter]
  public Belt Belt { get; set; }

  public ZDepthQueryParameters SearchParameters { get { return new ZDepthQueryParameters(X, Y, Z, P / 100, XMin, XMax); } private set { } }


  protected IJSObjectReference module;

  protected override async Task OnInitializedAsync()
  {
    Y = (int)Belt.FrameLength;
    X = (int)Belt.Xmax;
    Z = (int)Belt.z_max;
    XMin = -Belt.Xmax/2;
    XMax = Belt.Xmax/2;

  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      module = await JS.InvokeAsync<IJSObjectReference>("import", "./querybuilder.js");
      await module.InvokeVoidAsync("initThree", Belt.Xmax, Belt.FrameLength, Belt.z_max - Belt.z_min);
      await module.InvokeVoidAsync("update", X, Y, Z);
    }

  }

  protected async Task LoadDamageAsync(SavedZDepthParams d)
  {
    X = (int)d.Width;
    Y = (int)d.Length;
    Z = (int)d.Depth;
    P = d.Percentage * 100;
    XMin = d.XMin;
    XMax = d.XMax;

    if (module is not null)
    {
      await module.InvokeVoidAsync("update", X, Y, Z, P);
    }

    StateHasChanged();

  }

  public Func<float, bool> MakeAreaOfInterest()
  {
    return z => z < Z;
  }


  public async Task LoadZDepthParamsAsync(SavedZDepthParams x)
  {
    if (x is not null)
    {
      await LoadDamageAsync(x);
    }else {
      logger.LogError("Expected 1 SavedZDepthParams. Received 0");
    }
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    try
    {
      if (module is not null)
      {
        await module.DisposeAsync();
      }
    }
    catch (Microsoft.JSInterop.JSDisconnectedException) { }
  }
}