@page "/site/trend/{site}/{conveyor}"

@using Fluxor.Blazor.Store;
@using Cads

@inject IJSRuntime JS
@inject BeltService Beltservice
@inject ISnackbar Snackbar
@inject ILogger<Trend> logger

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<SiteHeader ShowDraw site="@site" conveyor="@conveyor">
  <MudSpacer/>
    <TrendControls @ref="trendControls" DateChanged="@DateChanged" Scan="@scan" />
  <MudSpacer/>
</SiteHeader>


<MudContainer MaxWidth="MaxWidth.False" Class="ma-0 pa-0"
  Style="width:calc(98vw - var(--mud-drawer-width-mini-left));height:calc(96vh - var(--mud-appbar-height)">
  <MudGrid Class="ma-0" Style="height:100%" Spacing=0>

<MudItem xs="12"  Style="height:46%">
<TrendPlot @ref="trendPlot" Scan="@scan" XIndex="@UpdateWearPlot"></TrendPlot>
</MudItem>
    <MudItem xs="12" Style="height:46%">
    <LinePlot @ref="wearPlot" ></LinePlot>
    </MudItem>
</MudGrid>
</MudContainer>


@code {
  
  protected TrendPlot trendPlot = new();
  protected LinePlot wearPlot = new();
  
  protected TrendControls trendControls = new();

  protected Scan scan {get; set;} = new();
  protected double yCoord;

  [Parameter]
  public string site { get; set; } = string.Empty;
  [Parameter]
  public string conveyor { get; set; } = string.Empty;
  
  [Inject]
  private IState<GuiState>? GuiState { get; set; }

  // Must use Async version otherwise fluxor crashes
  protected override async Task OnInitializedAsync()
  {
    if((GuiState is not null) && GuiState.Value.scan.HasData) {
      scan = GuiState.Value.scan;
      yCoord = GuiState.Value.Y;
    }else {
      scan = await Task.Run(() => Beltservice.GetScans(site, conveyor).Last());
    }
  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      var z = await Beltservice.GetBeltProfileAsync(yCoord, 1, scan);
      var color = trendControls.DatePickerColor[0];
      await trendPlot.UpdatePlotAsync(0,z,color);
      await UpdateWearPlot(1000);
    }
  }


  async Task DateChanged(ValueTuple<DateTime?, int, string> arg)
  {
    var (date,index,color) = arg;
    if (!date.HasValue || index > 3)
    {
      return;
    }

    var Y = GuiState?.Value.Y ?? 0;
    List<Scan> scan = Beltservice.GetScans(site, conveyor, date.Value);

    if(scan is not null && scan.Any()) {
      var z = await Beltservice.GetBeltProfileAsync(Y, 1, scan.First());
      await trendPlot.UpdatePlotAsync(index,z,color);
    }else{
      Snackbar.Add($"No data for selected date", Severity.Error);
    }
  }

  async Task UpdateWearPlot(int x_index) {
    
    List<DateTime> x = new();
    List<double> y = new();
    
    var tasks = new List<Task<(DateTime,(bool,float))>>();

    var Y = GuiState?.Value.Y ?? 0;
    foreach (var scan in Beltservice.GetScans(site, conveyor)) {
      tasks.Add(Task.Run(() => (scan.Chrono,NoAsp.RetrievePoint(scan.Filepath,Y,x_index))));
    }

   
    foreach(var d in await Task.WhenAll(tasks.ToArray())) {
      if(!d.Item2.Item1) {
        x.Add(d.Item1);
        y.Add(d.Item2.Item2);
      }
    }

    await wearPlot.UpdatePlotAsync(x.ToArray(),y.ToArray());
  }

}