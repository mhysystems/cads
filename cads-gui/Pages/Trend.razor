@page "/site/trend/{site}/{conveyor}"

@using Fluxor.Blazor.Store;
@using Cads

@inject IJSRuntime JS
@inject BeltService Beltservice
@inject ISnackbar Snackbar
@inject ILogger<Trend> logger

@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<SiteHeader ShowDraw site="@site" conveyor="@conveyor">
  <MudSpacer/>
    <TrendControls DateChanged="@DateChanged" Belt="@GuiState.Value.Belt" />
  <MudSpacer/>
</SiteHeader>

@if(@GuiState.Value.Belt is not null) {
<MudContainer MaxWidth="MaxWidth.False" Class="ma-0 pa-0"
  Style="width:calc(100vw - var(--mud-drawer-width-mini-left));height:calc(100vh - var(--mud-appbar-height)">
  <MudGrid Class="ma-0" Style="height:100%" Spacing=0>

<MudItem xs="12" Class="d-flex" Style="height:50%">
<TrendPlot @ref="trendPlot" Belt="@GuiState.Value.Belt" XIndex="@UpdateWearPlot"></TrendPlot>
</MudItem>
    <MudItem xs="12" >
    <LinePlot @ref="wearPlot" ></LinePlot>
    </MudItem>
</MudGrid>
</MudContainer>
}

@code {
  
  protected TrendPlot trendPlot;
  protected LinePlot wearPlot;

  [Parameter]
  public string site { get; set; }
  [Parameter]
  public string conveyor { get; set; }
  
  [Inject]
  private IState<GuiState> GuiState { get; set; }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      var module = await JS.InvokeAsync<IJSObjectReference>("import", "./plot.js");
      await DateChanged((GuiState.Value.Belt.chrono,0,Colors.Orange.Accent3));
      await UpdateWearPlot(0);
    }
  }

  async Task DateChanged(ValueTuple<DateTime?, int, string> arg)
  {
    var (date,index,color) = arg;
    if (!date.HasValue || index > 3)
    {
      return;
    }

    var belt = Beltservice.GetBelt(site, conveyor, date.Value);
    var Y = GuiState?.Value.Y ?? 0;

    if(belt is not null) {
      var (XOffset,z) = await Beltservice.GetBeltProfileAsync(Y, 1, belt);
      await trendPlot.UpdatePlotAsync(index,XOffset,z,color);
    }else{
      Snackbar.Add($"No data for selected date", Severity.Error);
    }

  }

  async Task UpdateWearPlot(int x_index) {
    var belts = await Beltservice.GetBeltsAsync(site, conveyor);
    List<DateTime> x = new();
    List<double> y = new();
    
    var Y = GuiState?.Value.Y ?? 0;
    var timer = new Stopwatch();
    timer.Start();
    await foreach (var (chrono,height) in Beltservice.ConveyorsHeightAsync(Y,x_index,belts)) {
      x.Add(chrono);
      y.Add(await height);
      logger.LogDebug("UpdateWearPlot: {}",timer.Elapsed);
    };
    await wearPlot.UpdatePlotAsync(x.ToArray(),y.ToArray());
  }
}