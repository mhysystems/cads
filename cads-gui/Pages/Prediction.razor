@page "/site/prediction/{site}/{conveyor}"

@using Cads

@inject BeltService dataservice
@inject ISnackbar Snackbar
@inject ILogger<Trend> logger



<SiteHeader ShowDraw site="@site" conveyor="@conveyor">
  <MudSpacer/>
  <MudSpacer/>
</SiteHeader>


<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="ma-0 pa-0"
  Style="height:calc(100vh - var(--mud-appbar-height)">
  <MudGrid Class="ma-0" Style="height:100%" Spacing=0>

@for(var i = 0; i < urls.GetLength(0); i++) {
  @for(var j = 0; j < urls.GetLength(1); j++ ) {
    var jl = j;
    var il = i;
    <MudItem xs="@xs">
      @if(urls[il,jl] is not null) {
      <iframe src="@urls[il,jl]" width="450" height="200" frameborder="0"></iframe>
      }
    </MudItem>
  }
}

</MudGrid>
</MudContainer>


@code {
  

  [Parameter]
  public string site { get; set; } = string.Empty;
  [Parameter]
  public string conveyor { get; set; } = string.Empty;

  protected string[,] urls = new string[0,0];
  protected int xs = 12;

  protected override async Task OnInitializedAsync()
  {
    var belt = await dataservice.GetBelt(site,conveyor);
    var plots = await dataservice.GetGrafanaPlotsAsync(belt);
    
    if(plots.Any()) {
      var Cols = plots.Max(e => e.Col) + 1;
      var Rows = plots.Max(e => e.Row) + 1;

      xs = (int) xs / Cols;

      urls = new string[Rows,Cols];

      foreach(var p in plots) {
        urls[p.Row,p.Col] = p.Url;
      }
    }
    
  }
  

}