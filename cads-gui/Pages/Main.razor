@page "/site/dashboard/{site}/{conveyor}"

@using Cads
@using Microsoft.Extensions.Logging
@using System.Collections.Concurrent
@using Fluxor.Blazor.Store

@inject IJSRuntime JS
@inject BeltService Beltservice
@inject ILogger<Main> logger
@inject ISnackbar Snackbar


@implements IAsyncDisposable
@inherits Fluxor.Blazor.Web.Components.FluxorComponent

<SiteHeader ShowDraw site="@site" conveyor="@conveyor">
  <SearchControls SelectZDepthParams="@LoadZDepthParamsAsync" DateChanged="@DateChanged" Scan="@scan"
    JumpTo="@JumpToAsync" StepBack="@StepBackward" StepForward="@StepForward" Search="@SearchBelt"
    SaveZQueryParams="SaveZQueryParams" savedZDepthParams="savedZDepthParams" @bind-YPos:get="@currentY" @bind-YPos:set="@JumpToAsync"/>
</SiteHeader>

<MudContainer MaxWidth="MaxWidth.False" Class="ma-0 pa-0"
  Style="width:calc(100vw - var(--mud-drawer-width-mini-left));height:calc(100vh - var(--mud-appbar-height)">
  <MudGrid Class="ma-0" Style="height:100%" Spacing=0>
    <MudItem xs="12" Class="d-flex" Style="height:40%">

      <MudTooltip Placement="Placement.End"
        Text="The circle represents the entire belt. Damage locations that match the search criteria are indicated in white. Clicking on the circle triggers the plot to jump to that location. If too many damage locations are found they are limited">
        <DoughnutPlot @ref="doughnutPlot" Style="display:contents" Scan="@scan" Y="@UpdateYAsync" />
      </MudTooltip>
      <MudContainer Class="d-flex flex-column ">
        <ZDepthQuery @ref="zDepthQuery" Scan="@scan"></ZDepthQuery>
        <MudExpansionPanels Class="z-30">
          <MudExpansionPanel Class="overflow-auto" Dense="true" MaxHeight="270" Text="Search Results">
            <Ztable @ref="@zDepthTabe" selectedRow="@UpdateYAsync"></Ztable>
          </MudExpansionPanel>

        </MudExpansionPanels>
      </MudContainer>

      <RealtimeDetection Site="@site" Conveyor="@conveyor"  selectedRow="@UpdateYAsync" />

      <BeltMetadata Site="@site" Conveyor="@conveyor" />
    </MudItem>

    <MudItem xs="12" Style="height:50%">
      <Progress @ref="progress" />
      <SurfacePlot @ref="surfacePlot" Scan="@scan" YIndex="@UpdateProfilePlotAsync"></SurfacePlot>
    </MudItem>
    <MudItem xs="12" Style="height:10%">
      <ProfilePlot @ref="profilePlot" Scan="@scan" Belt="@belt" DoubleSided="@(Beltservice.IsDoubledSided())">
      </ProfilePlot>
    </MudItem>
  </MudGrid>
</MudContainer>

@code {

  [Parameter]
  public string site { get; set; } = string.Empty;
  [Parameter]
  public string conveyor { get; set; } = String.Empty;

  // Bindings
  private DotNetObjectReference<Main>? selfReference;
  SurfacePlot surfacePlot = new();
  ProfilePlot profilePlot = new();
  ZDepthQuery zDepthQuery = new();
  DoughnutPlot doughnutPlot = new();
  Progress progress = new();

  List<SavedZDepthParams> savedZDepthParams = new();


  Ztable zDepthTabe = new();

  double _currentY = 0;
  protected double currentY
  {
    get { return _currentY; }
    set
    {
      _currentY = value;
      var action = new YAction(value);
      Dispatcher.Dispatch(action);
    }
  }

  protected Scan scan { get; set; } = new();
  protected Belt belt { get; set; } = new();
  protected IJSObjectReference? plotDataCache;

  [Inject]
  public IDispatcher Dispatcher { get; set; } = default!;

  protected override async Task OnInitializedAsync()
  {
    var scans = Beltservice.GetScans(site, conveyor);
    if (scans.Any())
    {
      scan = scans.Last();
      var action = new BeltAction(scan);
      Dispatcher?.Dispatch(action);
      savedZDepthParams = await Task.Run(() => Beltservice.GetSavedZDepthParams(scan) ?? new List<SavedZDepthParams>());

      var belts = Beltservice.GetBelt(scan);

      if (belts.Any())
      {
        belt = belts.Last();
      }

    }

  }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      selfReference = DotNetObjectReference.Create(this);
      await using var module = await JS.InvokeAsync<IJSObjectReference>("import", "./plot.js");
      plotDataCache = await module.InvokeAsync<IJSObjectReference>("mk_PlotDataCache", selfReference);
      await UpdateYAsync(currentY);
    }
  }

  async Task LoadZDepthParamsAsync(SavedZDepthParams x)
  {
    await zDepthQuery.LoadZDepthParamsAsync(x);
  }

  async Task UpdateProfilePlotAsync(ValueTuple<int, double> args)
  {
    var (yIndex, y) = args;
    Dispatcher.Dispatch(new YAction(y));
    await profilePlot.UpdateYAsync(yIndex);
  }

  async Task StepForward()
  {
    var windowLen = Beltservice.config.NumDisplayLines;
    var yRes = scan.y_res;
    var yMax = scan.Ymax;

    currentY += (yRes * windowLen);
    currentY = NoAsp.Mod(currentY, yMax);
    await UpdateYAsync(currentY);
  }

  async Task StepBackward()
  {

    var windowLen = Beltservice.config.NumDisplayLines;
    var yRes = scan.y_res;
    var yMax = scan.Ymax;

    currentY -= (yRes * windowLen);
    currentY = NoAsp.Mod(currentY, yMax);
    await UpdateYAsync(currentY);
  }

  [JSInvokable]
  public async Task SetProgressPercentageAsync(double p)
  {
    if (p < 0)
    {
      p = 0;
    }

    if (p > 1)
    {
      p = 1;
    }

    await progress.Update(p);

  }

  async Task UpdateYAsync(ZDepth zd)
  {
    Func<IJSObjectReference, Task<double>> fn = x => surfacePlot.UpdatePlotWithOverlayAsync(x, zd);
    await UpdateYAsync(zd.y, fn);
  }

  async Task UpdateYAsync(double y)
  {
    await UpdateYAsync(y, surfacePlot.UpdatePlotAsync);
  }

  async Task UpdateYAsync(double y, Func<IJSObjectReference, Task<double>> fn)
  {

    currentY = y;
    surfacePlot.Loading = true;
    var windowLen = Beltservice.config.NumDisplayLines;
    var windowBegin = (int)(windowLen / 2);
    var frameLength = Beltservice.config.FrameLength;
    try
    {
      if (plotDataCache is null)
      {
        throw new Exception();
      }

      if (!Beltservice.IsDoubledSided())
      {
        await using var plotDataPromise = await plotDataCache.InvokeAsync<IJSObjectReference>("fetchData", scan.name, currentY,windowLen, windowBegin);

        await fn(plotDataPromise);
        await profilePlot.UpdatePlotAsync(plotDataPromise);
      }
      else
      {
        await using var plotDataPromiseBottom = await plotDataCache.InvokeAsync<IJSObjectReference>("fetchData", scan.name, currentY + frameLength,
        windowLen, windowBegin);
        await using var plotDataPromiseTop = await plotDataCache.InvokeAsync<IJSObjectReference>("fetchData", scan.name, currentY, windowLen,
        windowBegin);

        await surfacePlot.UpdatePlotDoubleSidedAsync(plotDataPromiseTop, plotDataPromiseBottom);
        await profilePlot.UpdatePlotDoubleSidedAsync(plotDataPromiseTop, plotDataPromiseBottom);
      }
    }
    catch (Exception)
    {
      Snackbar.Add($"Problem retrieving data", Severity.Error);
    }
    surfacePlot.Loading = false;
  }

  async Task JumpToAsync(double y)
  {
    await UpdateYAsync(y);
  }

  async Task DateChanged(DateTime? date)
  {

    if (!date.HasValue)
    {
      return;
    }


    var b = Beltservice.GetScans(site, conveyor, date.Value);

    if (b.Any())
    {
      Snackbar.Add($"Loading belt scan on {DateOnly.FromDateTime(date.Value)}", Severity.Info);
      scan = b.Last();
      await UpdateYAsync(currentY);
      StateHasChanged();
    }
    else
    {
      Snackbar.Add($"No belt scan for {DateOnly.FromDateTime(date.Value)}", Severity.Warning);
    }
  }


  async Task SaveZQueryParams(string name)
  {
    var s = new SavedZDepthParams
      {
        Name = name,
        Site = scan.site,
        Conveyor = scan.conveyor,
        Width = zDepthQuery.SearchParameters.Width,
        Length = zDepthQuery.SearchParameters.Length,
        ZMax = zDepthQuery.SearchParameters.ZMax,
        Percentage = zDepthQuery.SearchParameters.Percentage,
        XMin = zDepthQuery.SearchParameters.XMin,
        XMax = zDepthQuery.SearchParameters.XMax,
        ZMin = zDepthQuery.SearchParameters.ZMin
      };

    await zDepthQuery.LoadZDepthParamsAsync(s);
    Beltservice.AddDamage(s);
    savedZDepthParams = Beltservice.GetSavedZDepthParams(scan);
    StateHasChanged();
  }
  async Task SearchBelt()
  {

    doughnutPlot.AnimateSearch = true;

    var limit = 64L;

    try
    {
      var zDepth = await Beltservice.BeltScanAsync2(zDepthQuery.SearchParameters, scan, limit);

      if (zDepth.Count > limit)
      {
        Snackbar.Add($"Too many results. Limited to {limit}", Severity.Warning);
      }

      doughnutPlot.data = zDepth.OrderBy(i => i.y).Take((int)limit).Select(d => new
      PlotInfo(d.y, scan.FrameLength, d.z.z, "")).ToList();

      zDepthTabe.data = zDepth;
      var fn = zDepthQuery.MakeAreaOfInterest();
      await surfacePlot.HighlightSurfaceAsync(fn);

    }
    catch (Exception e)
    {
      logger.LogError(e.Message);
    }

    doughnutPlot.AnimateSearch = false;

  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    try {
      selfReference?.Dispose();
      base.Dispose();

      if (plotDataCache is not null) {
        await plotDataCache.DisposeAsync();
        plotDataCache = null;
      }
    }catch(Microsoft.JSInterop.JSDisconnectedException) {}
  }

}