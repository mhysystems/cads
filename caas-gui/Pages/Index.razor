@page "/remote/{deviceCipherText}"

@using Microsoft.AspNetCore.SignalR.Client
@using caas_gui.Data

@inject MsgPublishService MsgService
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

@if(device is not null && hubConnection is not null) {
  <PageTitle>Caas Remote</PageTitle>
  <input list="datalistOptions" @onchange="@((ChangeEventArgs __e) => selectedConveyor = __e?.Value?.ToString())"/>
  <datalist id="datalistOptions">
    @foreach(var conveyor in conveyors) {
      <option value="@conveyor.Name"/>
    }
  </datalist>
  <button class="btn btn-primary" @onclick="Clicked" disabled="@(!isConnected)">@buttonStatus</button>
}else if(device is not null) {
  <PageTitle>Error</PageTitle>
  <p>Unable to connect to Caas Device</p>
}

@code 
{
  [Parameter]
  public string deviceCipherText { get; set; } = string.Empty;
  protected Device? device = null;

  protected IEnumerable<Conveyor> conveyors = Enumerable.Empty<Conveyor>();

  protected string? selectedConveyor {get; set;}
  private HubConnection? hubConnection;

  protected bool isConnected => hubConnection?.State == HubConnectionState.Connected && device is not null && device.State.HasFlag(DeviceState.Connected);

  protected string buttonStatus = "Start";

  protected override async Task OnInitializedAsync()
  {
    device = MsgService.GetDevice(deviceCipherText);
    
    if(device is not null) {
      buttonStatus = device.State.HasFlag(DeviceState.Scanning) ? "Stop" : "Start";
      conveyors = MsgService.GetConveyers(device);

      hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/msg"))
        .Build();

      hubConnection.On<string>("ReceiveMessage", (message) =>
      {
        switch(message) {
          case "ClientDisconnect" :
          hubConnection.InvokeAsync("LeaveGroup",device.Serial.ToString());
          hubConnection = null;
          break;
          default:
          break;
        }
        InvokeAsync(StateHasChanged);
      });

      hubConnection.On<Device>("UpdateDevice", (d) =>
      {
        device = d;
        buttonStatus = d.State.HasFlag(DeviceState.Scanning) ? "Stop" : "Start";
        InvokeAsync(StateHasChanged);
      });

      await hubConnection.StartAsync();
      await hubConnection.InvokeAsync("JoinGroup",device.Serial.ToString());
    }
  }
  private void Clicked()
  { 
    if(isConnected && selectedConveyor is not null && device is not null) {
      
        var conveyor = conveyors.Where( e => e.Name == selectedConveyor);
        if(conveyor.Any()) {
          if(buttonStatus == "Start") {
            buttonStatus = "Stop";
            device.State |= DeviceState.Scanning;
            MsgService.PublishStart(device,conveyor.First());  
            StateHasChanged();
          }else if(buttonStatus == "Stop") {
             buttonStatus = "Start";
             device.State &= ~DeviceState.Scanning;
             MsgService.PublishStop(device);    
          }
        }
    }
  }
  public async ValueTask DisposeAsync()
  {
    if (hubConnection is not null)
    {
      await hubConnection.DisposeAsync();
    }
  }
}