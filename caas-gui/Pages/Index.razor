@page "/remote/{deviceCipherText}"
@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@using caas_gui.Data

@inject MsgPublishService MsgService
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

@implements IAsyncDisposable


<main>
          <beltscan>
          <input list="datalistSites" @onchange="@((ChangeEventArgs __e) => Site = __e?.Value?.ToString())" />
          <datalist id="datalistSites">
            @foreach (var site in conveyors.Select( c => c.Site).Distinct())
            {
              <option value="@site" />
            }
          </datalist>
          <input list="datalistOptions" @onchange="@((ChangeEventArgs __e) => selectedConveyor = __e?.Value?.ToString())" />
          <datalist id="datalistOptions">
            @foreach (var conveyor in conveyors.Where(c => Site is not null ? c.Site == Site : true))
            {
              <option value="@conveyor.Name" />
            }
          </datalist>
          <middlerow>
            <p>@deviceStatus</p>
            @if (isScanning)
            {
              <progress max="100" value="@progress"></progress>
            }
          </middlerow>
          <bottomrow>
            <button class="btn btn-primary" @onclick="ScanClicked" disabled="@(!isConnected || isScanning)">Scan</button>
            <button class="btn btn-primary" @onclick="CancelClicked" disabled="@(!isConnected)">Cancel</button>
          </bottomrow>
        </beltscan>
  
</main>


@code
{
  [Parameter]
  public string deviceCipherText { get; set; } = string.Empty;
  protected Device? device = null;

  protected string? Site = null;
  protected IEnumerable<Conveyor> conveyors = Enumerable.Empty<Conveyor>();

  protected string? selectedConveyor { get; set; }
  private HubConnection? hubConnection;

  protected bool isConnected => hubConnection?.State == HubConnectionState.Connected && device is not null &&
  device.State.HasFlag(DeviceState.Connected);
  protected bool isScanning => hubConnection?.State == HubConnectionState.Connected && device is not null &&
  device.State.HasFlag(DeviceState.Connected) && device.State.HasFlag(DeviceState.Scanning);

  protected string deviceStatus = "Cads unit not detected";
  protected double progress = 0;

  protected Alignment alignView = new();

  protected override async Task OnInitializedAsync()
  {
    device = MsgService.GetDevice(deviceCipherText);

    if (device is not null)
    {
      deviceStatus = DeviceStateMsg(device.State);
      conveyors = MsgService.GetConveyers(device);

      hubConnection = new HubConnectionBuilder()
      .WithUrl(NavigationManager.ToAbsoluteUri("/msg"))
      .Build();

      hubConnection.On<string>("ReceiveMessage", (message) =>
      {
        switch (message)
        {
          case "ClientDisconnect":
            hubConnection.InvokeAsync("LeaveGroup", device.Serial.ToString());
            hubConnection = null;
            break;
          default:
            break;
        }
        InvokeAsync(StateHasChanged);
      });

      hubConnection.On<Device>("UpdateDevice", (d) =>
      {
        device = d;
        progress = 0;
        deviceStatus = DeviceStateMsg(d.State);
        InvokeAsync(StateHasChanged);
      });

      hubConnection.On<double>("UpdateProgress", (d) =>
      {
        progress = d;
        InvokeAsync(StateHasChanged);
      });

      hubConnection.On<byte[]>("Profile", async (z) =>
      {
        await alignView.UpdateProfileData(z);
      });

      hubConnection.On<DeviceError>("DeviceError", (m) =>
      {
        var (d, e) = m;
        device = d;
        progress = 0;
        deviceStatus = DeviceStateMsg(d.State);
        alignView.Reset();
        InvokeAsync(StateHasChanged);
      });

      await hubConnection.StartAsync();
      await hubConnection.InvokeAsync("JoinGroup", device.Serial.ToString());
    }
  }
  private void ScanClicked()
  {
    if (isConnected && selectedConveyor is not null && device is not null)
    {

      var conveyor = conveyors.Where(e => e.Name == selectedConveyor);
      if (conveyor.Any())
      {
        device.State |= DeviceState.Scanning;
        MsgService.PublishStart(device, conveyor.First());
        deviceStatus = DeviceStateMsg(device.State);
        StateHasChanged();
      }
    }
  }
  private void CancelClicked()
  {
    if (isConnected && device is not null)
    {
      if(device.State.HasFlag(DeviceState.Scanning)){device.State &= ~DeviceState.Scanning;}
      else if(device.State.HasFlag(DeviceState.Aligned)){device.State &= ~DeviceState.Aligned;}
      MsgService.PublishStop(device);
      deviceStatus = DeviceStateMsg(device.State);
      StateHasChanged();
    }
  }

  protected string DeviceStateMsg(DeviceState d)
  {
    var rtn = "Cads unit not detected";

    if (d.HasFlag(DeviceState.Connected))
    {
      rtn = "Ready";

      if (d.HasFlag(DeviceState.Scanning))
      {
        rtn = "Scanning";
      }
    }

    return rtn;
  }

  void AlignedUpdate(Alignment.AlignmentState a)
  {
    if(device is not null) 
    {
      if(a == Alignment.AlignmentState.Align)
      {
        MsgService.PublishAlign(device);
      }
      else if(a == Alignment.AlignmentState.Aligned)
      {
        device.State |= DeviceState.Aligned;
        MsgService.PublishStop(device);
      }
      else if(a == Alignment.AlignmentState.Cancel) {
        device.State &= ~DeviceState.Aligned;
        MsgService.PublishStop(device);
      }
    }
  }

  public async ValueTask DisposeAsync()
  {
    try 
    {
      if (hubConnection is not null)
      {
        await hubConnection.DisposeAsync();
      }
    }
    catch(Microsoft.JSInterop.JSDisconnectedException) {}
  }
}