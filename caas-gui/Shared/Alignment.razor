
@implements IAsyncDisposable

@inject IJSRuntime JS

<alignment-main>
  <text-mapping>
    <text>Noise</text>
    <text>:</text>
    <text @ref="@noiseValue">0</text>
    <text>%</text>
  </text-mapping>
  <canvas @ref="@jsPlotElement" width="420" height="120"></canvas>
  <button class="btn btn-primary" @onclick="UserAligned">Align</button>
</alignment-main>

@code
{
  [Parameter]
  public EventCallback<bool> aligned {get; set;}

  protected IJSObjectReference? jsPlot;
  protected ElementReference jsPlotElement;  
  protected ElementReference noiseValue;  

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      await using var module = await JS.InvokeAsync<IJSObjectReference>("import", "./plot.js");
      jsPlot = await module.InvokeAsync<IJSObjectReference>("mk_CanvasPlot",jsPlotElement,noiseValue);
    }
  }

  public async Task UpdateProfileData(byte[] z) {
    // 32 is primitive sanity check for minimum number of bytes
    if(jsPlot is not null && (z.Length > 32)) {
      await jsPlot.InvokeVoidAsync("updatePlot",z);
    }
  }

  private async Task UserAligned(MouseEventArgs e)
  {
    await aligned.InvokeAsync(true);
  }

  async ValueTask IAsyncDisposable.DisposeAsync()
  {
    try 
    {
      if (jsPlot is not null) {
        await jsPlot.DisposeAsync();
        jsPlot = null;
      }
    }catch(Microsoft.JSInterop.JSDisconnectedException) {}
  }
}